import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
	id 'application'
	id 'java'
	id 'idea'
	id "nebula.deb" version "6.2.1"
	id "nebula.rpm" version "6.2.1"
	id "edu.sc.seis.macAppBundle" version "2.3.0"
	id 'org.jetbrains.kotlin.jvm' version '1.3.50'
	id "com.github.johnrengelman.shadow" version "5.1.0"
	id "org.openjfx.javafxplugin" version "0.0.7"
	id "org.beryx.jlink" version "2.16.0"
	id "org.javamodularity.moduleplugin" version "1.5.0"
}

// Note: define javaVersion, javaHomeLinux, javaHomeMac, and javaHomeWindows inside your gradle.properties file

group = 'com.projectswg.launcher'
version = '1.3.2'
sourceCompatibility = 12

application {
	mainClassName = "com.projectswg.launcher/com.projectswg.launcher.core.LauncherKt"
}

sourceSets {
	main {}
	utility {}
}

idea {
    module {
        inheritOutputDirs = true
    }
}

jlink {
	addOptions '--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'
	targetPlatform('linux', javaHomeLinux)
	targetPlatform('mac', javaHomeMac)
	targetPlatform('windows', javaHomeWindows)
}

javafx {
	version = "12.0.1"
	modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web', 'javafx.media']
}

shadowJar {
	archivesBaseName = "Launcher"
	archiveClassifier.set(null)
	archiveVersion.set(null)
}

repositories {
	mavenLocal()
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    jcenter()
}

dependencies {
	compile project(':pswgcommon')
	compile project(':client-holocore')
	compile project(':forwarder')
	compile 'net.openhft:zero-allocation-hashing:0.8'
	compile group: 'me.joshlarson', name: 'fast-json', version: '2.2.3'
	compile group: 'me.joshlarson', name: 'jlcommon-fx', version: '1.0.3'
	compile(group: 'no.tornado', name: 'tornadofx', version: '2.0.0-SNAPSHOT') {
		exclude group: "org.jetbrains.kotlin"
	}
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.3.50'
	compile group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.3.50'
	compile 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'
	
	utilityCompile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
	utilityCompile group: 'me.joshlarson', name: 'fast-json', version: '2.2.3'
	utilityCompile 'net.openhft:zero-allocation-hashing:0.8'
	
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

/**
 * Copies the JLink created JRE into a subdirectory in build/ that contains a /Contents/Home/jre directory.
 * This has to happen because the Mac App Bundle plugin relies on that structure unfortunately.
 */
def macJreLocation = projectDir.toString() + "/build/mock-mac-jre/Contents/Home"
task createMacJREStructure(type: Copy) {
	dependsOn(tasks.jlink)
	from "build/image/launcher-mac"
	include "**/*"
	into macJreLocation + "/jre"
}

macAppBundle {
	appName "ProjectSWG"
	dmgName "ProjectSWG"
	icon "src/main/resources/graphics/ProjectSWGLaunchpad.icns"
	mainClassName "${->project.mainClassName}"
	jvmVersion javaVersion
	jreHome macJreLocation
	bundleJRE true
}
// Enforce that the JRE is copied with a Mac based structure
bundleJRE.dependsOn createMacJREStructure

task linuxDeb(type: Deb) {
	dependsOn 'jlink'
	release '1'
	packageName 'projectswg'
	maintainer 'ProjectSWG'
	
	preInstall file('packaging/linux/preInstall.sh')
	postInstall file('packaging/linux/postInstall.sh')
	preUninstall file('packaging/linux/preUninstall.sh')
	postUninstall file('packaging/linux/postUninstall.sh')
	
	from ('build/image/launcher-linux') {
		into '/opt/ProjectSWG'
	}
	from ('packaging/linux') {
		exclude '*.sh'
		into '/opt/ProjectSWG'
	}
	
	link('/usr/share/applications/ProjectSWG.desktop', '/opt/ProjectSWG/ProjectSWG.desktop')
}

task linuxRpm(type: Rpm) {
	dependsOn 'jlink'
	release '1'
	packageName 'projectswg'
	maintainer 'ProjectSWG'
	
	preInstall file('packaging/linux/preInstall.sh')
	postInstall file('packaging/linux/postInstall.sh')
	preUninstall file('packaging/linux/preUninstall.sh')
	postUninstall file('packaging/linux/postUninstall.sh')
	
	from ('build/image/launcher-linux') {
		into '/opt/ProjectSWG'
	}
	from ('packaging/linux') {
		exclude '*.sh'
		into '/opt/ProjectSWG'
	}
	
	link('/usr/share/applications/ProjectSWG.desktop', '/opt/ProjectSWG/ProjectSWG.desktop')
}

task CreateUpdateListTask(type: ShadowJar) {
	archiveName = 'CreateUpdateList.jar'
	manifest.attributes 'Main-Class': 'com.projectswg.launcher.utility.CreateUpdateList'
	from sourceSets.utility.output
	configurations = [project.configurations.utilityRuntime]
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
		jvmTarget = "1.8"
	}
}
